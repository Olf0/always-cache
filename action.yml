name: 'Always cache'
description: 'Cache artifacts like dependencies and build outputs to improve workflow execution time'
branding:
  icon: 'archive'
  color: 'gray-dark'

inputs:
  path:
    description: 'A list of files, directories, and wildcard patterns to cache and restore'
    required: true
  key:
    description: 'An explicit key for restoring and saving the cache'
    required: true
  restore-keys:
    description: 'An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.'
    required: false
  upload-chunk-size:
    description: 'The chunk size used to split up large files during upload, in bytes'
    required: false

outputs:
  cache-hit:
    description: 'A boolean value to indicate an exact match was found for the primary key'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: 'composite'
  env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1
  steps:
    # Instead of running `actions/cache@v3` directly, check it out locally and patch.
    - name: Prepare
      run: mkdir -p ./.github/.tmp/actions/cache-always
      
    - name: 'Checkout actions/cache@v3'
      uses: actions/checkout@v3
      with:
        repository: actions/cache
        ref: v3
        path: ./.github/.tmp/actions/cache-always

    - name: 'Patch actions/cache@v3'
      run: sed -i 's/post-if: success()$/post-if: ${{ success() || failure() }}/' ./.github/.tmp/actions/cache-always/action.yml

    - name: Cache
      id: cache
      uses: ./.github/.tmp/actions/cache-always
      with:
        path: ${{ inputs.path }}
        key: ${{ inputs.key }}
        restore-keys: ${{ inputs.restore-keys }}
        upload-chunk-size: ${{ inputs.upload-chunk-size }}
